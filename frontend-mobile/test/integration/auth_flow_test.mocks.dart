// Mocks generated by Mockito 5.4.6 from annotations
// in wayrapp_mobile/test/integration/auth_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wayrapp_mobile/features/authentication/domain/models/auth_response.dart'
    as _i2;
import 'package:wayrapp_mobile/features/authentication/domain/models/user.dart'
    as _i5;
import 'package:wayrapp_mobile/features/authentication/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:wayrapp_mobile/features/server_selection/data/repositories/server_repository.dart'
    as _i6;
import 'package:wayrapp_mobile/features/server_selection/domain/models/server_config.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResponse_0 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthResponse> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<_i2.AuthResponse> register(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            name,
          ],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_0(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              name,
            ],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.AuthResponse?> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i4.Future<_i2.AuthResponse?>.value(),
      ) as _i4.Future<_i2.AuthResponse?>);

  @override
  _i4.Future<_i5.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);

  @override
  _i4.Future<bool> isAuthenticated() => (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [ServerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockServerRepository extends _i1.Mock implements _i6.ServerRepository {
  MockServerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> testConnection(String? serverUrl) => (super.noSuchMethod(
        Invocation.method(
          #testConnection,
          [serverUrl],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> getServerHealth(String? serverUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getServerHealth,
          [serverUrl],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> saveServerConfig(_i7.ServerConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveServerConfig,
          [config],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i7.ServerConfig?> loadServerConfig() => (super.noSuchMethod(
        Invocation.method(
          #loadServerConfig,
          [],
        ),
        returnValue: _i4.Future<_i7.ServerConfig?>.value(),
      ) as _i4.Future<_i7.ServerConfig?>);

  @override
  _i4.Future<void> clearServerConfig() => (super.noSuchMethod(
        Invocation.method(
          #clearServerConfig,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i7.ServerConfig> getPredefinedServers() => (super.noSuchMethod(
        Invocation.method(
          #getPredefinedServers,
          [],
        ),
        returnValue: <_i7.ServerConfig>[],
      ) as List<_i7.ServerConfig>);
}
