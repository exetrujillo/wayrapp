// WayrApp Database Schema
// Author: Exequiel Trujillo
// Production-ready schema for language learning platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String    @unique @db.VarChar(255)
  username            String?   @unique @db.VarChar(50)
  passwordHash        String?   @map("password_hash") @db.VarChar(255)
  countryCode         String?   @map("country_code") @db.Char(2)
  registrationDate    DateTime  @default(now()) @map("registration_date") @db.Timestamptz
  lastLoginDate       DateTime? @map("last_login_date") @db.Timestamptz
  profilePictureUrl   String?   @map("profile_picture_url") @db.VarChar(255)
  isActive            Boolean   @default(true) @map("is_active")
  role                Role      @default(student)
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  progress            UserProgress?
  lessonCompletions   LessonCompletion[]
  following           Follow[] @relation("Follower")
  followers           Follow[] @relation("Followed")
  revokedTokens       RevokedToken[]
  
  // Performance optimization indexes
  @@index([role, isActive], map: "idx_users_role_active")
  @@index([registrationDate(sort: Desc)], map: "idx_users_registration_date")
  @@index([lastLoginDate(sort: Desc)], map: "idx_users_last_login")
  @@index([email], map: "idx_users_active_email")
  @@index([username], map: "idx_users_active_username")
  @@map("users")
}

model Follow {
  followerId  String   @map("follower_id") @db.Uuid
  followedId  String   @map("followed_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  // Relations
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed    User     @relation("Followed", fields: [followedId], references: [id], onDelete: Cascade)
  
  @@id([followerId, followedId])
  @@index([followedId])
  @@map("follows")
}

model UserProgress {
  userId                  String    @id @map("user_id") @db.Uuid
  experiencePoints        Int       @default(0) @map("experience_points")
  livesCurrent           Int       @default(5) @map("lives_current")
  streakCurrent          Int       @default(0) @map("streak_current")
  lastCompletedLessonId  String?   @map("last_completed_lesson_id") @db.VarChar(60)
  lastActivityDate       DateTime  @default(now()) @map("last_activity_date") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastCompletedLesson    Lesson?   @relation(fields: [lastCompletedLessonId], references: [id], onDelete: SetNull)
  
  // Performance optimization indexes
  @@index([experiencePoints(sort: Desc)], map: "idx_user_progress_exp_points")
  @@index([lastActivityDate(sort: Desc)], map: "idx_user_progress_activity")
  @@index([streakCurrent(sort: Desc)], map: "idx_user_progress_streak")
  @@map("user_progress")
}

model LessonCompletion {
  userId            String   @map("user_id") @db.Uuid
  lessonId          String   @map("lesson_id") @db.VarChar(60)
  completedAt       DateTime @map("completed_at") @db.Timestamptz
  score             Int?
  timeSpentSeconds  Int?     @map("time_spent_seconds")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson            Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@id([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([completedAt])
  @@map("lesson_completions")
}

model Course {
  id             String   @id @db.VarChar(20)
  sourceLanguage String   @map("source_language") @db.VarChar(20)
  targetLanguage String   @map("target_language") @db.VarChar(20)
  name           String   @db.VarChar(100)
  description    String?
  isPublic       Boolean  @default(true) @map("is_public")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  levels         Level[]
  
  // Basic indexes
  @@index([sourceLanguage])
  @@index([targetLanguage])
  @@index([isPublic])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([name])
  @@index([sourceLanguage, targetLanguage])
  
  // Performance optimization indexes
  @@index([sourceLanguage, targetLanguage, isPublic], map: "idx_courses_source_target_public")
  @@index([isPublic, createdAt(sort: Desc)], map: "idx_courses_public_created")
  @@index([name], map: "idx_courses_public_name")
  @@index([sourceLanguage, targetLanguage], map: "idx_courses_public_languages")
  @@map("courses")
}

model Level {
  id        String   @id @db.VarChar(30)
  courseId  String   @map("course_id") @db.VarChar(20)
  code      String   @db.VarChar(10)
  name      String   @db.VarChar(100)
  order     Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sections  Section[]
  
  @@unique([courseId, code])
  @@unique([courseId, order])
  @@index([courseId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([name])
  
  // Performance optimization indexes
  @@index([courseId, order], map: "idx_levels_course_order")
  @@index([courseId, createdAt(sort: Desc)], map: "idx_levels_course_created")
  @@map("levels")
}

model Section {
  id        String   @id @db.VarChar(40)
  levelId   String   @map("level_id") @db.VarChar(30)
  name      String   @db.VarChar(150)
  order     Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  level     Level     @relation(fields: [levelId], references: [id], onDelete: Cascade)
  modules   Module[]
  
  @@unique([levelId, order])
  @@index([levelId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([name])
  
  // Performance optimization indexes
  @@index([levelId, order], map: "idx_sections_level_order")
  @@index([levelId, createdAt(sort: Desc)], map: "idx_sections_level_created")
  @@map("sections")
}

model Module {
  id         String     @id @db.VarChar(50)
  sectionId  String     @map("section_id") @db.VarChar(40)
  moduleType ModuleType @map("module_type")
  name       String     @db.VarChar(150)
  order      Int
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  section    Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  lessons    Lesson[]
  
  @@unique([sectionId, order])
  @@index([sectionId])
  @@index([moduleType])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([name])
  
  // Performance optimization indexes
  @@index([sectionId, order], map: "idx_modules_section_order")
  @@index([sectionId, moduleType], map: "idx_modules_section_type")
  @@index([sectionId, createdAt(sort: Desc)], map: "idx_modules_section_created")
  @@map("modules")
}

model Lesson {
  id               String    @id @db.VarChar(60)
  moduleId         String    @map("module_id") @db.VarChar(50)
  name             String    @db.VarChar(150)
  description      String?
  experiencePoints Int       @default(10) @map("experience_points")
  order            Int
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  module           Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  exercises        LessonExercise[]
  userProgress     UserProgress[]
  completions      LessonCompletion[]
  
  @@unique([moduleId, order])
  @@index([moduleId])
  @@index([experiencePoints])
  @@index([createdAt])
  @@index([updatedAt])
  
  // Performance optimization indexes
  @@index([moduleId, order], map: "idx_lessons_module_order")
  @@index([moduleId, experiencePoints], map: "idx_lessons_module_exp")
  @@index([moduleId, createdAt(sort: Desc)], map: "idx_lessons_module_created")
  @@map("lessons")
}

model Exercise {
  id           String           @id @db.VarChar(15)
  exerciseType ExerciseType     @map("exercise_type")
  data         Json             @db.JsonB
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  lessons      LessonExercise[]
  
  @@index([exerciseType])
  
  // Performance optimization indexes
  @@index([exerciseType, createdAt(sort: Desc)], map: "idx_exercises_type_created")
  @@map("exercises")
}

model LessonExercise {
  lessonId   String   @map("lesson_id") @db.VarChar(60)
  exerciseId String   @map("exercise_id") @db.VarChar(15)
  order      Int
  
  // Relations
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@id([lessonId, exerciseId])
  @@index([lessonId])
  @@index([exerciseId])
  @@map("lesson_exercises")
}

model RevokedToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id") @db.Uuid
  revokedAt DateTime @default(now()) @map("revoked_at") @db.Timestamptz
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("revoked_tokens")
}

enum Role {
  student
  content_creator
  admin
}

enum ModuleType {
  informative
  basic_lesson
  reading
  dialogue
  exam
}

enum ExerciseType {
  translation
  fill_in_the_blank @map("fill-in-the-blank")
  vof
  pairs
  informative
  ordering
}